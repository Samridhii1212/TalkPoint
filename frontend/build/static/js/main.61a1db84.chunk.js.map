{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","color","type","placeholder","onChange","e","target","width","bg","boxShadow","borderRadius","_focus","borderColor","size","h","colorScheme","onClick","_hover","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","align","w","p","accept","pics","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","fadeIn","keyframes","Homepage","socket","selectedChatCompare","animation","usePrefersReducedMotion","undefined","maxW","centerContent","className","fontSize","fontWeight","mb","isFitted","_selected","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","isLastMessage","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","d","base","icon","View","isCentered","fontFamily","justifyContent","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","style","display","marginBottom","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","transition","transform","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","console","log","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","options","lastTypingTime","Date","getTime","setTimeout","Chatbox","borderWidth","borderStyle","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","neumorphicStyles","buttonStyles","border","inputStyles","menuItemStyles","accessChat","c","paddingX","marginRight","count","effect","Effect","SCALE","Bell","paddingLeft","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","paddingBottom","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61a1db84.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"40px\">\r\n      <FormControl id=\"email\" isRequired color=\"white\">\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          width=\"100%\" \r\n          color=\"black\" \r\n          bg=\"rgba(255,255,255,0.1)\" // Light background\r\n          boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n          borderRadius=\"md\"\r\n          _focus={{\r\n            bg: \"white\",\r\n            borderColor: \"purple.400\",\r\n            boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n           bg=\"rgba(255,255,255,0.1)\" // Light background\r\n          boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n          borderRadius=\"md\"\r\n          _focus={{\r\n            bg: \"white\",\r\n            borderColor: \"purple.400\",\r\n            boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n            width=\"100%\" \r\n            color=\"black\" \r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button  h=\"1.75rem\"\r\n              size=\"sm\"\r\n              colorScheme=\"purple\"\r\n              onClick={handleClick}\r\n             \r\n              _hover={{\r\n                bg: \"green.400\",\r\n                color: \"white\",\r\n              }}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"purple\"\r\n        width=\"100%\"\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n        boxShadow=\"8px 8px 16px #d1d1d1, -8px -8px 16px #ffffff\"\r\n        borderRadius=\"full\"\r\n      >\r\n        {loading ? \"Logging In...\" : \"Login\"}\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n       \r\n        boxShadow=\"8px 8px 16px #d1d1d1, -8px -8px 16px #ffffff\"\r\n        borderRadius=\"full\"\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [pic, setPic] = useState(\"\");\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please fill all the fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords do not match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error occurred!\",\r\n        description: error.response?.data?.message || \"Unknown Error\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    if (!pics) {\r\n      return;\r\n    }\r\n    setPicLoading(true);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"dvkx3llei\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/dvkx3llei/image/upload\", \r\n      {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please select an image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"30px\" align=\"stretch\" w=\"100%\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          color=\"black\"\r\n          bg=\"rgba(255,255,255,0.1)\" // Light background\r\n          boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n          borderRadius=\"md\"\r\n          _focus={{\r\n            bg: \"white\",\r\n            borderColor: \"purple.400\",\r\n            boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          color=\"black\"\r\n          bg=\"rgba(255,255,255,0.1)\" // Light background\r\n          boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n          borderRadius=\"md\"\r\n         _focus={{\r\n            bg: \"white\",\r\n            borderColor: \"purple.400\",\r\n            boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n           color=\"black\"\r\n            bg=\"rgba(255,255,255,0.1)\" \r\n            boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\"\r\n            borderRadius=\"md\"\r\n           \r\n            _focus={{\r\n              bg: \"white\",\r\n              borderColor: \"purple.400\",\r\n              boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n            }}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n              h=\"1.75rem\"\r\n              size=\"sm\"\r\n              colorScheme=\"purple\"\r\n              onClick={handleClick}\r\n             \r\n              _hover={{\r\n                bg: \"green.400\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password-confirm\" isRequired>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            color=\"black\"\r\n            bg=\"rgba(255,255,255,0.1)\" // Light background\r\n            boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n            borderRadius=\"md\"\r\n           \r\n            _focus={{\r\n              bg: \"white\",\r\n              borderColor: \"purple.400\",\r\n              boxShadow: \"0px 8px 15px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n            }}\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n               h=\"1.75rem\"\r\n              size=\"sm\"\r\n              colorScheme=\"purple\"\r\n              onClick={handleClick}\r\n             \r\n              _hover={{\r\n                bg: \"green.400\",\r\n                color: \"white\",\r\n              }}\r\n              \r\n            >\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\" color=\"white\">\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          color=\"black\"\r\n          bg=\"rgba(255,255,255,0.1)\" // Light background\r\n          boxShadow=\"0px 8px 15px rgba(0, 0, 0, 0.1)\" // Neumorphic shadow\r\n          borderRadius=\"md\"\r\n          \r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n       variant=\"solid\"\r\n        width=\"100%\"\r\n        boxShadow=\"8px 8px 16px #d1d1d1, -8px -8px 16px #ffffff\"\r\n        borderRadius=\"full\"\r\n        colorScheme=\"purple\"\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n        bg=\"purple.400\" \r\n        _hover={{\r\n          bg: \"purple.500\",\r\n        }}\r\n      >\r\n        {picLoading ? \"Signing Up...\" : \"Sign Up\"}\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n  keyframes,\r\n  usePrefersReducedMotion,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\n// Define keyframes for the animation\r\nconst fadeIn = keyframes`\r\n  from { opacity: 0; transform: translateY(-20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n`;\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n  const prefersReducedMotion = usePrefersReducedMotion();\r\n\r\n  // Use the animation if the user doesn't prefer reduced motion\r\n  const animation = prefersReducedMotion ? undefined : `${fadeIn} 1s ease-out`;\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent className=\"neumorphism-container\">\r\n      <Text\r\n        fontSize=\"3xl\"\r\n        fontWeight=\"bold\"\r\n        color=\"purple.400\"\r\n        animation={animation}\r\n        mb={4}\r\n      >\r\n        Welcome to Talk Point\r\n      </Text>\r\n      <Box w=\"100%\" p={4} className=\"neumorphism-box\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab _selected={{ color: \"white\", bg: \"purple.400\" }}>Login</Tab>\r\n            <Tab _selected={{ color: \"white\", bg: \"purple.400\" }}>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n            color=\"#7a48a9\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"white\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n           boxShadow=\"inset 8px 8px 16px rgba(0, 0, 0, 0.1), inset -8px -8px 16px rgba(255, 255, 255, 0.7), 8px 8px 16px rgba(0, 0, 0, 0.05), -8px -8px 16px rgba(255, 255, 255, 0.9)\" \r\n           >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"white\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n                borderRadius=\"lg\"\r\n                boxShadow=\"inset 4px 4px 8px rgba(0, 0, 0, 0.1), inset -4px -4px 8px rgba(255, 255, 255, 0.5)\" // Neumorphic shadow\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: m.sender._id === user._id ? \"flex-end\" : \"flex-start\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n            key={m._id}\r\n          >\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                  boxShadow=\"lg\"\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"rgb(153, 140, 205)\" : \"rgb(213, 201, 219)\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                borderRadius: \"10px\",\r\n                padding: \"10px 15px\",\r\n                maxWidth: \"75%\",\r\n                color:\"white\",\r\n                boxShadow: \"4px 4px 8px rgba(0, 0, 0, 0.1), -4px -4px 8px rgba(255, 255, 255, 0.5)\",\r\n                transition: \"all 0.3s ease-in-out\",\r\n                _hover: {\r\n                  transform: \"translateY(-2px)\",\r\n                  boxShadow: \"6px 6px 12px rgba(0, 0, 0, 0.15), -6px -6px 12px rgba(255, 255, 255, 0.8)\",\r\n                },\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n  //const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n   \r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\" // White background\r\n      borderRadius=\"xl\" // Rounded corners\r\n      borderWidth=\"1px\"\r\n      borderStyle=\"solid\"\r\n      borderColor=\"#ccc\"\r\n      boxShadow=\"4px 4px 8px rgba(0, 0, 0, 0.1), -4px -4px 8px rgba(255, 255, 255, 0.5)\" // Neumorphic shadow\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      transition=\"all 0.3s ease-in-out\"\r\n      _hover={{\r\n        transform: \"translateY(-2px)\",\r\n        boxShadow:\r\n          \"6px 6px 12px rgba(0, 0, 0, 0.15), -6px -6px 12px rgba(255, 255, 255, 0.8)\",\r\n      }}\r\n    > \r\n    \r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      boxShadow=\"4px 4px 8px rgba(0, 0, 0, 0.1), -4px -4px 8px rgba(255, 255, 255, 0.5)\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            bg=\"rgb(255, 255, 255)\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"rgb(213, 201, 219)\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const neumorphicStyles = {\r\n    boxShadow: \"4px 4px 8px #bebebe, -4px -4px 8px #ffffff\",\r\n    borderRadius: \"10px\",\r\n    background: \"white\",\r\n    color: \"#7a48a9\",\r\n   \r\n    \r\n  };\r\n\r\n  const buttonStyles = {\r\n    ...neumorphicStyles,\r\n    padding: \"10px\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n    transition: \"box-shadow 0.3s ease\",\r\n  };\r\n\r\n  const inputStyles = {\r\n    ...neumorphicStyles,\r\n    padding: \"10px\",\r\n    border: \"none\",\r\n    boxShadow: \"inset 2px 2px 4px #bebebe, inset -2px -2px 4px #ffffff\"\r\n  };\r\n\r\n  const menuItemStyles = {\r\n    padding: \"10px\",\r\n    borderRadius: \"10px\",\r\n    width:\"200px\",\r\n    marginLeft:\"20px\",\r\n    transition: \"background 0.3s ease\",\r\n    ...neumorphicStyles,\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        width=\"100%\"\r\n        padding=\"5px 10px\"\r\n        style={neumorphicStyles}\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen} style={buttonStyles}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text paddingX={7}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"3xl\" fontFamily=\"Work sans\">\r\n          Talk Point\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n\r\n            <MenuButton padding={1} style={buttonStyles} marginRight={7}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" margin={1} />\r\n            </MenuButton>\r\n\r\n\r\n            <MenuList paddingLeft={2} style={neumorphicStyles}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                  style={menuItemStyles}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} style={neumorphicStyles}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n              <ChevronDownIcon />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem style={menuItemStyles}>My Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler} style={menuItemStyles}>\r\n                Logout\r\n              </MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent style={neumorphicStyles}>\r\n          <DrawerHeader borderBottomWidth=\"1px\" style={neumorphicStyles}>\r\n            Search Users\r\n          </DrawerHeader>\r\n          <DrawerBody>\r\n            <Box display=\"flex\" paddingBottom={2} style={neumorphicStyles}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                marginRight={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                style={inputStyles}\r\n              />\r\n              <Button onClick={handleSearch} style={buttonStyles}>\r\n                Go\r\n              </Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                  style={menuItemStyles}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner marginLeft=\"auto\" display=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}